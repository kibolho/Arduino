#ifndef UNIT_TEST
#include <Arduino.h>
#endif
#include <IRremoteESP8266.h>
#include <IRsend.h>

#define IR_LED 16  // ESP8266 GPIO pin to use. Recommended: 4 (D2).
#define RELAY_PIN 5 
#define BUTTON_PIN 0 


IRsend irsend(IR_LED);  // Set the GPIO to be used to sending the message.

// Example of data captured by IRrecvDumpV2.ino
//uint16_t rawData[347]={9012, 4508, 568, 552, 592, 568, 544, 552, 568, 1684, 564, 1684, 564, 552, 568, 556, 564, 552, 568, 552, 568, 552, 564, 556, 564, 556, 564, 556, 588, 548, 564, 556, 564, 1684, 564, 556, 564, 556, 564, 552, 568, 552, 564, 552, 568, 556, 564, 556, 564, 552, 568, 552, 592, 544, 568, 576, 544, 552, 564, 556, 564, 552, 568, 556, 564, 576, 544, 1680, 568, 552, 568, 576, 544, 552, 568, 572, 572, 1672, 568, 552, 568, 576, 544, 552, 568, 552, 564, 556, 564, 576, 544, 552, 568, 552, 568, 572, 544, 552, 568, 1684, 592, 544, 568, 552, 568, 1684, 564, 1680, 568, 1684, 564, 552, 568, 1684, 564, 13508, 9048, 4504, 568, 556, 564, 556, 564, 552, 568, 1680, 568, 1684, 564, 556, 564, 552, 568, 552, 568, 552, 568, 552, 592, 568, 544, 552, 568, 552, 564, 556, 564, 556, 564, 1680, 568, 576, 544, 576, 544, 552, 568, 552, 568, 576, 540, 556, 592, 544, 568, 552, 564, 556, 564, 552, 568, 552, 568, 552, 568, 552, 564, 556, 564, 556, 564, 576, 544, 1684, 564, 552, 596, 544, 564, 552, 568, 556, 564, 1684, 564, 556, 564, 552, 568, 556, 564, 576, 544, 552, 568, 552, 564, 576, 544, 552, 592, 568, 544, 556, 564, 1684, 564, 552, 568, 556, 564, 1680, 568, 1684, 564, 1684, 564, 556, 564, 1680, 596, 13504, 8992, 4504, 568, 556, 592, 544, 564, 556, 564, 1684, 564, 1684, 568, 552, 568, 552, 564, 556, 564, 556, 564, 552, 568, 552, 568, 552, 564, 556, 592, 544, 568, 552, 564, 1684, 568, 552, 568, 552, 564, 556, 564, 556, 564, 552, 568, 552, 564, 556, 568, 572, 544, 556, 592, 540, 568, 556, 564, 556, 564, 556, 564, 552, 568, 552, 564, 556, 564, 1684, 568, 552, 564, 556, 564, 552, 568, 556, 588, 1676, 568, 552, 564, 556, 564, 556, 564, 552, 568, 552, 568, 552, 568, 552, 564, 556, 564, 576, 544, 576, 544, 1680, 596, 544, 564, 556, 564, 1684, 568, 1680, 568, 1684, 564, 556, 564, 1684, 564,};
//Desligar
uint16_t S_off[347]={9048, 4504, 592, 532, 568, 552, 564, 576, 568, 1656, 568, 1684, 588, 528, 572, 552, 564, 576, 544, 1684, 564, 576, 580, 1664, 568, 1704, 544, 576, 544, 1680, 568, 556, 588, 528, 568, 576, 568, 552, 544, 552, 564, 556, 564, 556, 564, 576, 568, 548, 564, 552, 576, 544, 568, 576, 544, 572, 544, 556, 564, 576, 544, 556, 564, 576, 544, 576, 544, 1676, 572, 572, 596, 520, 592, 552, 544, 552, 588, 1660, 568, 576, 544, 576, 544, 576, 564, 552, 544, 552, 592, 552, 568, 552, 544, 552, 592, 544, 568, 576, 544, 576, 568, 1680, 568, 1656, 592, 552, 568, 552, 568, 1680, 572, 1676, 572, 548, 596, 13476, 9040, 4480, 600, 548, 596, 516, 596, 528, 588, 1656, 596, 1676, 572, 548, 572, 548, 572, 548, 568, 1660, 592, 524, 592, 1656, 596, 1656, 592, 548, 596, 1648, 596, 548, 568, 528, 592, 552, 568, 548, 572, 524, 592, 552, 568, 552, 568, 552, 544, 552, 592, 548, 572, 548, 596, 520, 588, 552, 568, 528, 592, 528, 592, 552, 568, 552, 564, 528, 592, 1680, 548, 572, 544, 552, 592, 552, 568, 528, 592, 1676, 588, 532, 564, 576, 544, 576, 548, 548, 568, 552, 588, 556, 540, 576, 544, 552, 568, 552, 592, 552, 544, 572, 572, 1672, 592, 1656, 596, 548, 544, 576, 568, 1660, 592, 1656, 592, 552, 568, 13460, 9068, 4480, 596, 548, 572, 552, 568, 548, 572, 1676, 572, 1652, 596, 552, 568, 548, 572, 548, 568, 1656, 592, 528, 620, 1648, 596, 1648, 600, 524, 596, 1676, 572, 548, 572, 524, 592, 548, 572, 552, 568, 528, 592, 524, 596, 548, 568, 528, 620, 540, 572, 548, 568, 552, 568, 528, 592, 524, 596, 548, 572, 548, 572, 524, 592, 528, 592, 552, 568, 1680, 568, 524, 624, 540, 572, 548, 568, 528, 592, 1680, 568, 552, 568, 528, 592, 528, 592, 524, 596, 548, 572, 520, 600, 548, 568, 552, 596, 540, 568, 524, 596, 548, 572, 1652, 596, 1656, 596, 548, 568, 552, 568, 1680, 568, 1680, 572, 524, 620,};
//Padrao sinal RAW Ligar Ar Condicionado Consul 25oC
uint16_t S_pwr25[347]={9012, 4508, 564, 556, 592, 544, 568, 552, 564, 1684, 564, 1688, 564, 576, 544, 572, 544, 556, 564, 1684, 564, 576, 544, 1684, 568, 1684, 564, 576, 568, 1696, 544, 556, 568, 1680, 564, 576, 544, 556, 564, 576, 544, 576, 544, 576, 544, 576, 540, 580, 540, 580, 540, 556, 592, 564, 544, 576, 544, 576, 544, 576, 544, 552, 568, 576, 540, 580, 540, 1684, 568, 552, 568, 572, 544, 576, 544, 556, 588, 1696, 548, 552, 564, 580, 540, 576, 544, 576, 544, 576, 544, 576, 544, 576, 540, 556, 564, 576, 544, 576, 544, 556, 588, 1680, 560, 1688, 564, 576, 540, 556, 564, 1708, 544, 1684, 564, 1684, 564, 13516, 9036, 4508, 568, 556, 564, 576, 544, 576, 544, 1680, 568, 1684, 564, 576, 544, 576, 544, 576, 544, 1704, 544, 576, 568, 1676, 564, 1684, 568, 552, 568, 1680, 568, 556, 564, 1704, 544, 576, 544, 576, 544, 552, 568, 572, 544, 552, 568, 556, 592, 564, 544, 556, 564, 552, 568, 576, 544, 552, 568, 576, 544, 572, 548, 552, 564, 576, 544, 576, 544, 1684, 564, 556, 592, 544, 564, 576, 544, 576, 548, 1676, 568, 556, 564, 556, 564, 576, 544, 576, 544, 552, 564, 576, 544, 576, 544, 556, 588, 544, 568, 576, 544, 552, 568, 1684, 564, 1680, 568, 556, 564, 576, 544, 1704, 544, 1684, 568, 1680, 596, 13476, 9016, 4508, 568, 576, 568, 544, 568, 576, 540, 1684, 568, 1704, 544, 576, 544, 576, 544, 552, 564, 1708, 544, 556, 564, 1680, 568, 1680, 568, 576, 568, 1676, 568, 576, 540, 1684, 568, 576, 544, 576, 544, 552, 564, 556, 564, 552, 568, 552, 568, 572, 548, 576, 540, 576, 572, 544, 568, 552, 568, 552, 564, 576, 544, 552, 568, 576, 540, 576, 544, 1684, 568, 552, 564, 580, 540, 576, 544, 576, 572, 1676, 564, 576, 544, 552, 568, 572, 544, 576, 544, 576, 544, 576, 544, 576, 544, 576, 540, 576, 544, 556, 564, 576, 568, 1676, 568, 1704, 544, 576, 544, 556, 564, 1684, 564, 1684, 564, 1684, 564,};
//Padrao sinal RAW Ligar Ar Condicionado Consul 18oC
uint16_t S_pwr18[347]={9012, 4508, 568, 552, 592, 568, 544, 552, 568, 1684, 564, 1684, 564, 552, 568, 556, 564, 552, 568, 552, 568, 552, 564, 556, 564, 556, 564, 556, 588, 548, 564, 556, 564, 1684, 564, 556, 564, 556, 564, 552, 568, 552, 564, 552, 568, 556, 564, 556, 564, 552, 568, 552, 592, 544, 568, 576, 544, 552, 564, 556, 564, 552, 568, 556, 564, 576, 544, 1680, 568, 552, 568, 576, 544, 552, 568, 572, 572, 1672, 568, 552, 568, 576, 544, 552, 568, 552, 564, 556, 564, 576, 544, 552, 568, 552, 568, 572, 544, 552, 568, 1684, 592, 544, 568, 552, 568, 1684, 564, 1680, 568, 1684, 564, 552, 568, 1684, 564, 13508, 9048, 4504, 568, 556, 564, 556, 564, 552, 568, 1680, 568, 1684, 564, 556, 564, 552, 568, 552, 568, 552, 568, 552, 592, 568, 544, 552, 568, 552, 564, 556, 564, 556, 564, 1680, 568, 576, 544, 576, 544, 552, 568, 552, 568, 576, 540, 556, 592, 544, 568, 552, 564, 556, 564, 552, 568, 552, 568, 552, 568, 552, 564, 556, 564, 556, 564, 576, 544, 1684, 564, 552, 596, 544, 564, 552, 568, 556, 564, 1684, 564, 556, 564, 552, 568, 556, 564, 576, 544, 552, 568, 552, 564, 576, 544, 552, 592, 568, 544, 556, 564, 1684, 564, 552, 568, 556, 564, 1680, 568, 1684, 564, 1684, 564, 556, 564, 1680, 596, 13504, 8992, 4504, 568, 556, 592, 544, 564, 556, 564, 1684, 564, 1684, 568, 552, 568, 552, 564, 556, 564, 556, 564, 552, 568, 552, 568, 552, 564, 556, 592, 544, 568, 552, 564, 1684, 568, 552, 568, 552, 564, 556, 564, 556, 564, 552, 568, 552, 564, 556, 568, 572, 544, 556, 592, 540, 568, 556, 564, 556, 564, 556, 564, 552, 568, 552, 564, 556, 564, 1684, 568, 552, 564, 556, 564, 552, 568, 556, 588, 1676, 568, 552, 564, 556, 564, 556, 564, 552, 568, 552, 568, 552, 568, 552, 564, 556, 564, 576, 544, 576, 544, 1680, 596, 544, 564, 556, 564, 1684, 568, 1680, 568, 1684, 564, 556, 564, 1684, 564,};

//TV Samsung
uint16_t TV_pwr[68]={4600,4350,700,1550,650,1550,650,1600,650,450,650,450,650,450,650,450,700,400,700,1550,650,1550,650,1600,650,450,650,450,650,450,700,450,650,450,650,450,650,1550,700,450,650,450,650,450,650,450,650,450,700,400,650,1600,650,450,650,1550,650,1600,650,1550,650,1550,700,1550,650,1550,650};

#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <WiFiUdp.h>
#include <functional>
#include "switch.h"
#include "UpnpBroadcastResponder.h"
#include "CallbackFunction.h"

// prototypes
boolean connectWifi();

//on/off callbacks 
bool officeAcOn();
bool officeAcOff();

bool officeTvOn();
bool officeTvOff();

bool officeRelayOn();
bool officeRelayOff();

// Change this before you flash
const char* ssid = "Varoes";
const char* password = "luanabilio";

boolean wifiConnected = false;

UpnpBroadcastResponder upnpBroadcastResponder;

Switch *ac = NULL;
Switch *tv = NULL;
Switch *relay = NULL;

bool isOfficeAcOn = false;
bool isOfficeTvOn = false;
bool isOfficeRelayOn = false;

void setup()
{ 
  Serial.begin(9600);
  
  pinMode(RELAY_PIN, OUTPUT);
  irsend.begin();
  // Initialise wifi connection
  wifiConnected = connectWifi();
  
  if(wifiConnected){
    upnpBroadcastResponder.beginUdpMulticast();
    
    // Define your switches here. Max 10
    // Format: Alexa invocation name, local port no, on callback, off callback
    ac = new Switch("ac", 80, officeAcOn, officeAcOff);
    tv = new Switch("television", 81, officeTvOn, officeTvOff);
    relay = new Switch("load", 82, officeRelayOn, officeRelayOff);
    
    Serial.println("Adding switches upnp broadcast responder");
    upnpBroadcastResponder.addDevice(*ac);
    upnpBroadcastResponder.addDevice(*tv);
    upnpBroadcastResponder.addDevice(*relay);
  }
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), handleInterrupt, FALLING);
}
 
void loop()
{
	 if(wifiConnected){
      upnpBroadcastResponder.serverLoop();
     
      ac->serverLoop();
      tv->serverLoop();
      relay->serverLoop();
	 }
}

bool officeAcOn() {
    Serial.println("AC 1 turn on ...");
    irsend.sendRaw(S_pwr18, 347, 38);
    isOfficeAcOn = true;    
    return isOfficeAcOn;
}

bool officeAcOff() {
    Serial.println("AC 1 turn off ...");
    irsend.sendRaw(S_off, 347, 38);
    isOfficeAcOn = false;
    return isOfficeAcOn;
}

bool officeTvOn() {
    Serial.println("TV 1 turn on ...");
    irsend.sendRaw(TV_pwr, 68, 38);
    isOfficeTvOn = true;    
    return isOfficeTvOn;
}

bool officeTvOff() {
    Serial.println("TV 1 turn off ...");
    irsend.sendRaw(TV_pwr, 68, 38);
    isOfficeTvOn = false;
    return isOfficeAcOn;
}
unsigned long timecount = millis();
void handleInterrupt(){
  if (timecount+500<millis()){
    if (isOfficeRelayOn){
      digitalWrite(RELAY_PIN, LOW);
      isOfficeRelayOn = false;
    }else{
      digitalWrite(RELAY_PIN, HIGH);
      isOfficeRelayOn = true;
    }
    timecount = millis();
  }
}
bool officeRelayOn() {
    Serial.println("Relay 1 turn on ...");
    digitalWrite(RELAY_PIN, HIGH);
    isOfficeRelayOn = true;    
    return isOfficeRelayOn;
}

bool officeRelayOff() {
    Serial.println("Relay 1 turn off ...");
    digitalWrite(RELAY_PIN, LOW);
    isOfficeRelayOn = false;
    return isOfficeRelayOn;
}

// connect to wifi – returns true if successful or false if not
boolean connectWifi(){
  boolean state = true;
  int i = 0;
  
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("");
  Serial.println("Connecting to WiFi");

  // Wait for connection
  Serial.print("Connecting ...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    if (i > 10){
      state = false;
      break;
    }
    i++;
  }
  
  if (state){
    Serial.println("");
    Serial.print("Connected to ");
    Serial.println(ssid);
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
  }
  else {
    Serial.println("");
    Serial.println("Connection failed.");
  }
  
  return state;
}
